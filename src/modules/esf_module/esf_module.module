<?php

use Drupal\esf_module\Data\Role;
use Drupal\esf_module\Data\Route;
use Drupal\esf_module\Server;
use Drupal\esf_module\Settings;

module_load_include('inc', 'esf_module', 'includes/ebt_code_complete.class');

define('ESF_MODULE_GUACAMOLE_ENABLED', 'guacamole_enabled');
define('ESF_MODULE_GUACAMOLE_SERVER_DOMAIN', 'guacamole_server_domain');
define('ESF_MODULE_GUACAMOLE_SERVER_PORT', 'guacamole_server_port');
define('ESF_MODULE_GUACAMOLE_SERVER_PATH', 'guacamole_server_path');
define('ESF_MODULE_GUACAMOLE_HOME', 'guacamole_home');
define('ESF_MODULE_GUACAMOLE_PROPERTIES_FILE', 'guacamole_properties_file');

define('ESF_MODULE_ASPI_PROTOCOL', 'aspi_protocol');

/**
 * Implements hook_init().
 */
function esf_module_init() {
  global $user;

  $guacamole_enabled_global = variable_get_value(ESF_MODULE_GUACAMOLE_ENABLED);
  $guacamole_enabled_user = Settings::prefers_guacamole();

  $guacamole_enabled = $guacamole_enabled_global && $guacamole_enabled_user;

  $settings = array(
    'esf' => array(
      'is_guacamole_enabled' => $guacamole_enabled,
      'protocol' => variable_get_value(ESF_MODULE_ASPI_PROTOCOL),
      'server_url' => Server::getUrl(),
      'server_domain' => Server::getDomain(),
      'server_port' => Server::getPort(),
      'server_path' => Server::getPath(),
      'subject_map' => esf_module_get_subject_map()
    ),
  );

  drupal_add_js($settings, 'setting');

  $username = Settings::username();

  if ($guacamole_enabled && user_is_logged_in()
    && strlen($username) == 0 && strpos(current_path(), 'user/') === FALSE) {

    $message = t('Please fill in your ASPI credentials <a href="!url">here</a>.',
      array('!url' => url("user/$user->uid/edit")));

    $message .= t('If you don\'t have credentials yet, please go <a href="#">here</a>.');

    drupal_get_messages(NULL, TRUE);
    drupal_set_message($message, 'warning');
  }
}

/**
 * Implements hook_permission().
 */
function esf_module_permission() {
  return array(
    'administer esf' => array(
      'title' => t('Administer ESF configuration'),
      'description' => t('Allows to set or alter settings for Guacamole server'),
    ),
    'access aspi' => array(
      'title' => t('Access ASPI Remote'),
      'description' => t('Allows a user to connect to an ASPI remote machine server'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function esf_module_menu() {
  return array(
    Route::HOME => array(
      'title' => 'Home',
      'page callback' => 'esf_module_page_home',
      'access arguments' => array('access content'),
      'file' => 'includes/esf_module.pages.inc',
      'type' => MENU_CALLBACK,
    ),
    Route::ASPI => array(
      'title' => 'ASPI Portal',
      'page callback' => 'esf_module_page_aspi',
      'access arguments' => array('access aspi'),
      'file' => 'includes/esf_module.pages.inc',
      'type' => MENU_CALLBACK,
    ),
    Route::ASPI_AJAX_LOGIN => array(
      'page callback' => 'esf_module_ajax_login',
      'access arguments' => array('access aspi'),
      'file' => 'includes/esf_module.ajax.inc',
      'type' => MENU_CALLBACK,
    ),
  );
}

function esf_user_login(&$edit, $account) {
  $roles = $account->roles;

  if(in_array(Role::MODERATOR, $roles)) {
    $edit['redirect'] = Route::WORKBENCH;
  } else {
    $edit['redirect'] = Route::HOME;
  }
}

/**
 * Implements hook_user_insert().
 */
function esf_module_user_insert(&$edit, $account, $category) {
  if (empty($account->field_aspi_username[LANGUAGE_NONE][0]['value']) ||
    empty($account->field_aspi_password[LANGUAGE_NONE][0]['password_field'])) {
    $uid = $account->uid;

    // Display a message to the user, notifying him that he should fill
    // in his ASPI credentials.
    $message = t('Please fill in your ASPI credentials <a href="!url">here</a>.',
      array('!url' => url("user/$uid/edit")));

    $options = array(
      'type' => 'warning',
      'pdm_type' => 'ASPI credentials',
      'repeat' => FALSE,
      'persist' => TRUE,
      'uid' => $uid,
    );

    //pdm_create_message($message, $options);
  }
}

/**
 * Implements hook_theme().
 */
function esf_module_theme() {
  return array(
    'map_area' => array(
      'variables' => array(
        'items' => array(),
        'name' => NULL,
      ),
    ),
  );
}

/**
 * Returns html with rendered map / area.
 *
 * @param $variables
 *   associative array with parameters for rendering the map
 * @return string
 */
function theme_map_area($variables) {
  $name = $variables['name'];
  $items = $variables['items'];

  $output = "<map name='$name'>";

  //<area id="squidhead" href="#" shape="circle" coords="290,102,30" alt="Octoface" data-maphilight="{&quot;stroke&quot;:false,&quot;fillColor&quot;:&quot;ff0000&quot;,&quot;fillOpacity&quot;:0.6}" title="Metadata'd up a bit">

  foreach ($items as $id => $item) {
    $id = 'map-' . $id;
    $shape = $item['shape'];
    $coords = $item['coords'];
    $title = array_key_exists('title', $item) ? $item['title'] : '';

    $maphilight_params = array();

    if (!empty($item['stroke'])) {
      $maphilight_params[] = '"stroke":"' . $item['stroke'] . '"';
    } else {
      $maphilight_params[] = '"stroke":false';
    }
    if (!empty($item['fillcolor'])) {
      $maphilight_params[] = '"fillColor":"' . $item['fillcolor'] . '"';
    }
    if (!empty($item['fillopacity'])) {
      $maphilight_params[] = '"fillOpacity":' . $item['fillopacity'];
    }

    $maphilight = '{' . implode(',', $maphilight_params) . '}';

    $output .= "<area id='$id' shape='$shape' coords='$coords' title='$title' data-maphilight='$maphilight' />";
  }

  $output .= "</map>";

  return $output;
}

function esf_module_get_subject_map() {
  $nodes = node_load_multiple(array(), array('type' => 'legal_subject'));

  $mapping = array();

  foreach ($nodes as $node) {
    $wrapper = EbtWrapperNodeLegalSubject::factory($node);

    if (function_exists('transliteration_get')) {
      $label_raw = transliteration_get($wrapper->label());
    } else {
      $label_raw = $wrapper->label();
    }

    $label = preg_replace('/[^a-z0-9]+/', '-', strtolower($label_raw));
    /**
     * @var $subject EbtWrapperNodeSchoolSubject
     */
    foreach ($wrapper->field_school_subjects->getIterator() as $subject) {

      $mapping[$subject->getIdentifier()][] = $label;
    }
  }

  return $mapping;
}